---
layout: post
title:  "Cross Origin Resource Sharing"
date:   2016-02-15 23:00:00 +0530
categories: javascript
tags: CORS RIA
place: Kolkata, India
author: Avik Chakraborty
---

Mashup or web application hybrid is now becoming very common. Web mashup is a web development practice where a webpage decorate itself with the data from different providers who published their services through API. The APIs are certainly deployed in a domain different from the domain where its consumers are deployed. In traditional web development practice the UI and server side logic deployed in a same domain and these self-contained applications need cross domain communication rarely. Now the web applications are getting loosely coupled and server side - client side can be deployed in some separate ecology (having separate domain, server etc.) altogether.  In Web 1.0 business model, companies stored their data within their periphery and provides portal kind of interface to consumers but in Web 2.0 more and more b2b models are emerging and data eventually flow across the business through some defined interface (API, web sockets etc.) giving a mesh structure.

In this ecology what essential is securing the inter domain communication keeping the development complexity as low possible. [Same-origin policy](https://www.w3.org/Security/wiki/Same_Origin_Policy) of the browser barred application to communicate beyond its own domain for some serious security reasons. [CORS](https://www.w3.org/TR/cors/) (Cross Origin Resource Sharing) is W3C recommendation for cross origin communication which is our main focus here.

### Same Origin policy
>An origin is defined by the scheme, host, and port of a URL. Generally speaking, documents retrieved from distinct origins are isolated from each other. For example, if a document retrieved from http://example.com/doc.html tries to access the DOM of a document retrieved from https://example.com/target.html, the user agent will disallow access because the origin of the first document, (http, example.com, 80), does not match the origin of the second document (https, example.com, 443).                                                                                                               **From www.w3.org**

The same origin policy (SOP) distinguishes between posting and getting information across domain. Though getting information across domain is allowed, posting information to a different domain should be blocked. This restrictions are imposed to prevent attacks such as cross-site request forgery (CSRF) and clickjacking. Both of this attack exploits the same origin policy and silently open a back door to flow client’s information to hacker’s den. Having been understand the fact that same origin policy prevents some serious attack, it’s also true that now almost every legitimate website decorate itself using the API (for Get and Post) across domain.

Let’s have an example. A website (suppose *www.funtoon.com*) giving feature where users can decorate images from their online photo sharing portal (suppose *www.sociale.com*)   with some funny cartoon characters and can upload edited images back to the same sharing platform. From this simple fare business scenario  it can be understood that there are huge possibilities lurking around the web which need secure, flexible cross domain data sharing favorably with less effort.

>In principle, user agents could treat every URL as a separate principal and isolate each document from every other URL unless the document explicitly indicated that it trusted that URL. Unfortunately, this design is cumbersome for developers because web applications often consist of a number of resource acting in concert.

Obeying SOP for all kind of objects essentially means disrespecting the concept of hyper media, the backbone of the web. User agent collects all the URLs present in a document and group them together based on the origin (scheme + host + port) which represent the principals or protection group. Resources in a protection group never enjoys same privilege. Like images (MIME image/png) being a passive content having very limited scope where as  html contents (MIME text/html) enjoy highest privilege. Similarly there are some resources that got the permission to interact to outside domain like *script* tags (historical reason for this partiality is unknown) but network API's (like ajax call) are restricted from such fishy communications. For detail discussion please refer to this [draft](http://tools.ietf.org/html/draft-abarth-principles-of-origin-00)

### Cross-Origin Resource Sharing
>Cross-origin resource sharing (CORS) is a mechanism that allows many resources (e.g., fonts, JavaScript, etc.) on a web page to be requested from another domain outside the domain from which the resource originated. In particular, JavaScript's AJAX calls can use the XMLHttpRequest mechanism. Such "cross-domain" requests would otherwise be forbidden by web browsers as per the same-origin security policy. CORS defines a way in which the browser and the server can interact to determine whether or not to allow the cross-origin request. It is more useful than only allowing same-origin requests, and is more secure than simply allowing all cross-origin requests. 		**From Wikipedia, the free encyclopedia**

Let us first understand how user agent behaves while sharing resources cross origin. Below is the algorithm based on the [W3C Recommendation](https://www.w3.org/TR/cors/), how the user agent should behave. Before going through the algorithm let us understand some basic terminology used in the algorithm.

#### Simple Method

- GET
- HEAD
- POST


#### Simple Header

- Accept
- Accept-Language
- Content-Language  
- Content-Type : application/x-www-form-urlencoded, multipart/form-data or text/plain

For reference please refer to [W3C Recommendation](https://www.w3.org/TR/cors/#terminology)

![CORS - How User agent behaves](/images/blogs/2016-02-15-cors/CORS_User_agent "User agent CORS algorithm")

### CORS in Action
I have REST API deployed in *http://localhost:4567/* domain and client UI application deployed in *http://localhost:8080/*. I wrote jquery ajax script to access the REST API using below code fragments.

    function getCall() {
      var url = "http://localhost:4567/RestJersey/rest/v1.0/call";
    		$.ajax({
    		    url: url,
    		    type: 'GET', /*PUT,POST,DELETE also this code works*/
    		    success: function(result) {
    		        console.log("Success: "+result);
    		    },
    		    failure: function(error) {
    		        console.log("Failure: "+error);
    		    }
    		});
    }

The response I got in my chrome browser is follows:

**For GET and POST**

>XMLHttpRequest cannot load http://localhost:4567/RestJersey/rest/v1.0/call. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://localhost:8080' is therefore not allowed access.

For [Simple requests](https://www.w3.org/TR/cors/#terminology) there will be no preflight request, for other requests there will be a preflight (HTTP OPTION) request as mentioned below for PUT and DELETE.

**For PUT and DELETE**

>XMLHttpRequest cannot load http://localhost:4567/RestJersey/rest/v1.0/call. Response to preflight request doesn't pass access control check: No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://localhost:8080' is therefore not allowed access.

Let us see the request and response HTTP headers for simple request.

    Accept:*/*
    Accept-Encoding:gzip, deflate, sdch
    Accept-Language:en-US,en;q=0.8
    Connection:keep-alive
    Content-Type:text/plain; charset=UTF-8
    Host:localhost:4567
    Origin:http://localhost:8080
    Referer:http://localhost:8080/CorsDemo/
    User-Agent:Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.109 Safari/537.36


    Content-Length:20
    Content-Type:text/html
    Date:Mon, 15 Feb 2016 17:43:02 GMT
    Server:Apache-Coyote/1.1

Inspecting request header we understand user agent append *Origin* header for the cross domain request and expecting *Access-Control-Allow-Origin* header in the response.

For other than simple request there will be a preflight request whose headers will be like

    Accept:*/*
    Accept-Encoding:gzip, deflate, sdch
    Accept-Language:en-US,en;q=0.8
    Access-Control-Request-Headers:accept, content-type
    Access-Control-Request-Method:PUT
    Connection:keep-alive
    Host:localhost:4567
    Origin:http://localhost:8080
    Referer:http://localhost:8080/CorsDemo/
    User-Agent:Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.109 Safari/537.36


    Allow:HEAD,DELETE,POST,GET,OPTIONS,PUT
    Content-Length:1119
    Content-Type:application/vnd.sun.wadl+xml
    Date:Mon, 15 Feb 2016 18:26:58 GMT
    Last-modified:Mon, 15 Feb 2016 23:56:58 IST
    Server:Apache-Coyote/1.1

*Access-Control-Request-Headers* and *Access-Control-Request-Method* are the two new header in preflight request.

Doing some server side configuration to explicitly add the required header solved the CORS issue. The configuration in Jersey is mentioned below.

    //Implementing the filter to add the required headers
    public class CORSFilter
    implements ContainerResponseFilter {

    	public void filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext)
    			throws IOException {

    		MultivaluedMap<String, Object> headers = responseContext.getHeaders();

    		headers.add("Access-Control-Allow-Origin", "*");
    		//headers.add("Access-Control-Allow-Origin", "http://localhost:8080");		
    		headers.add("Access-Control-Allow-Methods", "GET, POST, DELETE, PUT");			

    	}

    }


    //Registering the filter
    @ApplicationPath("rest/v1.0")
    public class MyApplication extends ResourceConfig {
      public MyApplication() {
		      packages("com.avik.rest.resources");
		      register(CORSFilter.class);
	    }
    }

Now the response header contains the header *Access-Control-Allow-Origin* accepting all the domain.

    Access-Control-Allow-Methods:GET, POST, DELETE, PUT
    Access-Control-Allow-Origin:*
    Content-Length:20
    Content-Type:text/html
    Date:Mon, 15 Feb 2016 18:41:05 GMT
    Server:Apache-Coyote/1.1
